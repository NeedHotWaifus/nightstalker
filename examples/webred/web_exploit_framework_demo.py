#!/usr/bin/env python3
"""
NightStalker Web Exploitation Framework Demo
Comprehensive demonstration of the framework capabilities
"""

import os
import sys
import json
import time
from pathlib import Path
from nightstalker.redteam.web_exploit_framework import NightStalkerWebExploitFramework

def print_banner():
    """Print framework banner"""
    banner = """
    ╔══════════════════════════════════════════════════════════════╗
    ║                                                              ║
    ║  🌙 NightStalker Web Exploitation Framework Demo            ║
    ║                                                              ║
    ║  Advanced web penetration testing platform                  ║
    ║  Integrated with NightStalker offensive security            ║
    ║                                                              ║
    ╚══════════════════════════════════════════════════════════════╝
    """
    print(banner)

def demo_framework_initialization():
    """Demonstrate framework initialization"""
    print("🔧 FRAMEWORK INITIALIZATION")
    print("=" * 50)
    
    # Initialize framework
    framework = NightStalkerWebExploitFramework()
    
    print(f"✅ Framework initialized")
    print(f"📁 Base directory: {framework.base_dir}")
    print(f"📁 Modules directory: {framework.modules_dir}")
    print(f"📁 Loot directory: {framework.loot_dir}")
    print(f"📁 Tools directory: {framework.tools_dir}")
    
    return framework

def demo_tool_management(framework):
    """Demonstrate tool management capabilities"""
    print("\n🛠️ TOOL MANAGEMENT")
    print("=" * 50)
    
    # Get tool status report
    status_report = framework.get_tool_status_report()
    
    print("📊 Tool Status Report:")
    print("-" * 30)
    
    # Categorize tools
    categories = {}
    for tool_name, tool_info in status_report.items():
        category = tool_info["category"]
        if category not in categories:
            categories[category] = []
        categories[category].append((tool_name, tool_info))
    
    for category, tools in categories.items():
        print(f"\n{category.upper()}:")
        for tool_name, tool_info in tools:
            status_icon = "✅" if tool_info["status"] == "installed" else "❌"
            required = "Required" if tool_info["required"] else "Optional"
            print(f"  {status_icon} {tool_name} ({required}) - {tool_info['description']}")
    
    # Show installation options
    print(f"\n📋 Installation Options:")
    print("  • framework.install_all_tools() - Install all required tools")
    print("  • framework.install_tool('tool_name') - Install specific tool")
    print("  • framework.check_tool_status('tool_name') - Check tool status")

def demo_target_management(framework):
    """Demonstrate target management"""
    print("\n🎯 TARGET MANAGEMENT")
    print("=" * 50)
    
    # Example targets
    example_targets = [
        "https://httpbin.org",
        "https://example.com",
        "https://testphp.vulnweb.com"
    ]
    
    print("📋 Example Targets:")
    for i, target in enumerate(example_targets, 1):
        print(f"  {i}. {target}")
    
    # Set target
    target = example_targets[0]  # Use httpbin for demo
    framework.set_target(target)
    
    print(f"\n✅ Target set: {target}")
    print(f"📁 Target directory created: {framework.loot_dir / target}")
    
    # Show target structure
    target_dir = framework.loot_dir / target
    if target_dir.exists():
        print(f"\n📂 Target directory structure:")
        for subdir in ["recon", "exploit", "bruteforce", "post", "screenshots", "logs"]:
            subdir_path = target_dir / subdir
            if subdir_path.exists():
                print(f"  📁 {subdir}/")

def demo_reconnaissance(framework):
    """Demonstrate reconnaissance capabilities"""
    print("\n🔍 RECONNAISSANCE DEMO")
    print("=" * 50)
    
    target = "https://httpbin.org"
    print(f"🎯 Target: {target}")
    
    # Available reconnaissance tools
    recon_tools = ["nuclei", "nikto", "dirsearch", "httpx", "wpscan"]
    
    print(f"\n📋 Available Reconnaissance Tools:")
    for tool in recon_tools:
        status = framework.check_tool_status(tool)
        status_text = "✅ Available" if status.value == "installed" else "❌ Missing"
        print(f"  {status_text} - {tool}")
    
    print(f"\n🚀 Running Reconnaissance...")
    
    # Run reconnaissance (simulated for demo)
    print("  🔍 Running basic reconnaissance...")
    print("  📊 Gathering server information...")
    print("  🔎 Enumerating technologies...")
    print("  📁 Scanning directories...")
    print("  🌐 Checking subdomains...")
    
    # Simulate results
    recon_results = {
        "nuclei": {"success": True, "output": "Vulnerability scan completed"},
        "nikto": {"success": True, "output": "Web server scan completed"},
        "dirsearch": {"success": True, "output": "Directory enumeration completed"}
    }
    
    print(f"\n✅ Reconnaissance completed!")
    print(f"📊 Results saved to: {framework.loot_dir / target / 'recon'}")

def demo_exploitation(framework):
    """Demonstrate exploitation capabilities"""
    print("\n💥 EXPLOITATION DEMO")
    print("=" * 50)
    
    target = "https://httpbin.org"
    print(f"🎯 Target: {target}")
    
    # Available exploitation tools
    exploit_tools = ["sqlmap", "msfconsole", "nuclei"]
    
    print(f"\n📋 Available Exploitation Tools:")
    for tool in exploit_tools:
        status = framework.check_tool_status(tool)
        status_text = "✅ Available" if status.value == "installed" else "❌ Missing"
        print(f"  {status_text} - {tool}")
    
    print(f"\n🚀 Running Exploitation...")
    
    # Simulate exploitation
    print("  🔍 Testing for SQL injection vulnerabilities...")
    print("  🎯 Attempting XSS exploitation...")
    print("  📁 Testing for file inclusion vulnerabilities...")
    print("  🔐 Attempting authentication bypass...")
    
    # Simulate results
    exploit_results = {
        "sqlmap": {"success": False, "output": "No SQL injection vulnerabilities found"},
        "nuclei": {"success": True, "output": "Vulnerability scan completed"}
    }
    
    print(f"\n✅ Exploitation completed!")
    print(f"📊 Results saved to: {framework.loot_dir / target / 'exploit'}")

def demo_bruteforce(framework):
    """Demonstrate bruteforce capabilities"""
    print("\n🔨 BRUTEFORCE DEMO")
    print("=" * 50)
    
    target = "https://httpbin.org"
    print(f"🎯 Target: {target}")
    
    # Available bruteforce tools
    bruteforce_tools = ["openbullet", "hydra"]
    
    print(f"\n📋 Available Bruteforce Tools:")
    for tool in bruteforce_tools:
        status = framework.check_tool_status(tool)
        status_text = "✅ Available" if status.value == "installed" else "❌ Missing"
        print(f"  {status_text} - {tool}")
    
    print(f"\n🚀 Running Bruteforce...")
    
    # Simulate bruteforce
    print("  🔐 Testing common credentials...")
    print("  📝 Attempting password spraying...")
    print("  🎯 Testing default accounts...")
    print("  📊 Analyzing authentication mechanisms...")
    
    print(f"\n✅ Bruteforce completed!")
    print(f"📊 Results saved to: {framework.loot_dir / target / 'bruteforce'}")

def demo_post_exploitation(framework):
    """Demonstrate post-exploitation capabilities"""
    print("\n🔧 POST-EXPLOITATION DEMO")
    print("=" * 50)
    
    target = "https://httpbin.org"
    print(f"🎯 Target: {target}")
    
    # Available post-exploitation tools
    post_tools = ["msfconsole", "nc"]
    
    print(f"\n📋 Available Post-Exploitation Tools:")
    for tool in post_tools:
        status = framework.check_tool_status(tool)
        status_text = "✅ Available" if status.value == "installed" else "❌ Missing"
        print(f"  {status_text} - {tool}")
    
    print(f"\n🚀 Running Post-Exploitation...")
    
    # Simulate post-exploitation
    print("  🔍 Privilege escalation attempts...")
    print("  📁 Lateral movement...")
    print("  📊 Data exfiltration...")
    print("  🔐 Persistence establishment...")
    print("  🧹 Trace clearing...")
    
    print(f"\n✅ Post-exploitation completed!")
    print(f"📊 Results saved to: {framework.loot_dir / target / 'post'}")

def demo_reporting(framework):
    """Demonstrate reporting capabilities"""
    print("\n📊 REPORTING DEMO")
    print("=" * 50)
    
    target = "https://httpbin.org"
    print(f"🎯 Target: {target}")
    
    print(f"\n🚀 Generating Comprehensive Report...")
    
    # Simulate comprehensive assessment
    print("  📋 Collecting reconnaissance data...")
    print("  💥 Gathering exploitation results...")
    print("  🔨 Compiling bruteforce findings...")
    print("  🔧 Analyzing post-exploitation activities...")
    print("  📊 Generating executive summary...")
    print("  🎨 Creating HTML report...")
    
    # Simulate report generation
    report_file = f"web_exploit_report_{int(time.time())}.html"
    
    print(f"\n✅ Report generated successfully!")
    print(f"📄 Report file: {report_file}")
    print(f"🌐 Open in browser to view detailed report")

def demo_integration(framework):
    """Demonstrate NightStalker integration"""
    print("\n🌙 NIGHTSTALKER INTEGRATION DEMO")
    print("=" * 50)
    
    target = "https://httpbin.org"
    print(f"🎯 Target: {target}")
    
    print(f"\n🚀 Running Integrated Assessment...")
    
    # Simulate integrated assessment
    print("  🌙 NightStalker web red teaming scan...")
    print("  🔧 Web exploitation framework scan...")
    print("  📊 Combining results...")
    print("  🎨 Generating integrated report...")
    
    print(f"\n✅ Integrated assessment completed!")
    print(f"📄 Comprehensive report generated")
    print(f"🔗 Both frameworks working together seamlessly")

def demo_advanced_features(framework):
    """Demonstrate advanced features"""
    print("\n🚀 ADVANCED FEATURES DEMO")
    print("=" * 50)
    
    print("📋 Advanced Capabilities:")
    print("  🔧 Proxy Configuration")
    print("    - SOCKS5 proxy support")
    print("    - HTTP proxy support")
    print("    - Proxychains integration")
    
    print("\n  🌐 Tunnel Configuration")
    print("    - Ngrok integration")
    print("    - LocalTunnel support")
    print("    - SSH tunneling")
    
    print("\n  🐳 Docker Integration")
    print("    - Containerized tools")
    print("    - OpenBullet 2 Docker")
    print("    - Metasploit Docker")
    
    print("\n  📊 Advanced Reporting")
    print("    - HTML reports")
    print("    - JSON exports")
    print("    - Timeline analysis")
    print("    - Evidence collection")
    
    print("\n  🔄 Automation")
    print("    - Automated tool installation")
    print("    - Scheduled scans")
    print("    - Continuous monitoring")

def demo_cli_usage():
    """Demonstrate CLI usage"""
    print("\n🖥️ CLI USAGE EXAMPLES")
    print("=" * 50)
    
    print("📋 Framework Commands:")
    print("  python -m nightstalker.cli webred scan --url https://target.com")
    print("  python -m nightstalker.cli webred exploit --url https://target.com --exploit sqlmap")
    print("  python -m nightstalker.cli webred post-exploit --target-info scan.json --gain-root")
    print("  python -m nightstalker.cli webred clear-traces --target-info exploit.json --aggressive")
    print("  python -m nightstalker.cli webred report --input results.json --output report.html")
    
    print("\n📋 Installer Commands:")
    print("  python install_web_exploit_framework.py")
    print("  python install_web_exploit_framework.py --verbose")
    print("  python install_web_exploit_framework.py --skip-docker")
    print("  python install_web_exploit_framework.py --install-only sqlmap nuclei")
    
    print("\n📋 TUI Commands:")
    print("  python -m nightstalker.redteam.web_exploit_tui")
    print("  python nightstalker/redteam/web_exploit_tui.py")

def main():
    """Main demonstration function"""
    print_banner()
    
    print("⚠️  DISCLAIMER: This is a demonstration script.")
    print("   Only use on authorized targets with proper permission.")
    print("   This demo uses safe, public test targets.\n")
    
    try:
        # Initialize framework
        framework = demo_framework_initialization()
        
        # Demonstrate capabilities
        demo_tool_management(framework)
        demo_target_management(framework)
        demo_reconnaissance(framework)
        demo_exploitation(framework)
        demo_bruteforce(framework)
        demo_post_exploitation(framework)
        demo_reporting(framework)
        demo_integration(framework)
        demo_advanced_features(framework)
        demo_cli_usage()
        
        print("\n" + "=" * 60)
        print("🎯 DEMONSTRATION COMPLETE!")
        print("=" * 60)
        
        print("\n📋 What You've Seen:")
        print("  ✅ Framework initialization and setup")
        print("  ✅ Tool management and installation")
        print("  ✅ Target management and organization")
        print("  ✅ Reconnaissance capabilities")
        print("  ✅ Exploitation techniques")
        print("  ✅ Bruteforce capabilities")
        print("  ✅ Post-exploitation activities")
        print("  ✅ Comprehensive reporting")
        print("  ✅ NightStalker integration")
        print("  ✅ Advanced features")
        print("  ✅ CLI and TUI interfaces")
        
        print("\n🚀 Next Steps:")
        print("  1. Install the framework: python install_web_exploit_framework.py")
        print("  2. Set up your first target")
        print("  3. Run reconnaissance: framework.run_reconnaissance('target')")
        print("  4. Explore exploitation: framework.run_exploitation('target')")
        print("  5. Generate reports: framework.generate_report('target')")
        print("  6. Try the TUI: python -m nightstalker.redteam.web_exploit_tui")
        
        print("\n📚 Documentation:")
        print("  - Framework Guide: WEB_EXPLOIT_FRAMEWORK_README.md")
        print("  - Web Red Teaming: WEB_RED_TEAMING_GUIDE.md")
        print("  - Installation Log: Check install.log for details")
        
        print("\n🔒 Remember:")
        print("  - Always obtain proper authorization")
        print("  - Follow responsible disclosure practices")
        print("  - Keep tools updated regularly")
        print("  - Document all activities")
        
    except KeyboardInterrupt:
        print("\n\n⚠️  Demonstration interrupted by user")
    except Exception as e:
        print(f"\n\n❌ Error during demonstration: {e}")
        print("Check that all dependencies are installed correctly")

if __name__ == "__main__":
    main() 