"""
NightStalker Web Exploitation Framework TUI
Text User Interface for web penetration testing framework
"""

import os
import sys
import json
import time
import subprocess
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
import threading
from dataclasses import dataclass
from enum import Enum

try:
    import curses
    import curses.panel
    CURSES_AVAILABLE = True
except ImportError:
    CURSES_AVAILABLE = False

try:
    from rich.console import Console
    from rich.table import Table
    from rich.panel import Panel
    from rich.layout import Layout
    from rich.live import Live
    from rich.prompt import Prompt, Confirm
    from rich.text import Text
    from rich.progress import Progress, SpinnerColumn, TextColumn
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False

from .web_exploit_framework import NightStalkerWebExploitFramework

class FrameworkTUI:
    def __init__(self):
        self.console = Console() if RICH_AVAILABLE else None
        self.framework = NightStalkerWebExploitFramework()
        self.current_target = None
        self.current_module = None
        self.running = True
        
        # Module categories
        self.modules = {
            "recon": {
                "name": "Reconnaissance",
                "description": "Information gathering and enumeration",
                "tools": ["nuclei", "nikto", "dirsearch", "httpx", "wpscan", "subfinder"],
                "color": "blue"
            },
            "exploit": {
                "name": "Exploitation",
                "description": "Vulnerability exploitation and attack",
                "tools": ["sqlmap", "msfconsole", "nuclei"],
                "color": "red"
            },
            "bruteforce": {
                "name": "Bruteforce",
                "description": "Password and credential testing",
                "tools": ["openbullet", "hydra"],
                "color": "yellow"
            },
            "post": {
                "name": "Post-Exploitation",
                "description": "Post-compromise activities",
                "tools": ["msfconsole", "nc"],
                "color": "green"
            },
            "auxiliary": {
                "name": "Auxiliary",
                "description": "Supporting tools and utilities",
                "tools": ["proxychains", "ngrok", "burpsuite"],
                "color": "magenta"
            }
        }
    
    def run(self):
        """Main TUI loop"""
        if RICH_AVAILABLE:
            self._run_rich_tui()
        elif CURSES_AVAILABLE:
            self._run_curses_tui()
        else:
            self._run_simple_tui()
    
    def _run_rich_tui(self):
        """Run Rich-based TUI"""
        self.console.clear()
        self.console.print(Panel.fit(
            "[bold blue]üåô NightStalker Web Exploitation Framework[/bold blue]\n"
            "[dim]Advanced web penetration testing platform[/dim]",
            border_style="blue"
        ))
        
        while self.running:
            self._show_main_menu()
    
    def _show_main_menu(self):
        """Show main menu"""
        menu_options = [
            ("1", "Target Management", "Set and manage targets"),
            ("2", "Reconnaissance", "Information gathering modules"),
            ("3", "Exploitation", "Vulnerability exploitation"),
            ("4", "Bruteforce", "Password and credential testing"),
            ("5", "Post-Exploitation", "Post-compromise activities"),
            ("6", "Auxiliary Tools", "Supporting utilities"),
            ("7", "Tool Management", "Install and manage tools"),
            ("8", "Reports", "Generate and view reports"),
            ("9", "Settings", "Framework configuration"),
            ("0", "Exit", "Exit framework")
        ]
        
        table = Table(title="Main Menu", show_header=False, box=None)
        table.add_column("Option", style="cyan", width=5)
        table.add_column("Module", style="white")
        table.add_column("Description", style="dim")
        
        for option, module, description in menu_options:
            table.add_row(option, module, description)
        
        self.console.print(table)
        
        if self.current_target:
            self.console.print(f"\n[green]Current Target:[/green] {self.current_target}")
        
        choice = Prompt.ask("\nSelect option", choices=[opt[0] for opt in menu_options])
        
        self._handle_main_menu_choice(choice)
    
    def _handle_main_menu_choice(self, choice: str):
        """Handle main menu choice"""
        if choice == "1":
            self._target_management()
        elif choice == "2":
            self._module_menu("recon")
        elif choice == "3":
            self._module_menu("exploit")
        elif choice == "4":
            self._module_menu("bruteforce")
        elif choice == "5":
            self._module_menu("post")
        elif choice == "6":
            self._module_menu("auxiliary")
        elif choice == "7":
            self._tool_management()
        elif choice == "8":
            self._reports_menu()
        elif choice == "9":
            self._settings_menu()
        elif choice == "0":
            self.running = False
    
    def _target_management(self):
        """Target management interface"""
        self.console.clear()
        self.console.print(Panel.fit("[bold]Target Management[/bold]", border_style="green"))
        
        if self.current_target:
            self.console.print(f"[green]Current Target:[/green] {self.current_target}")
        
        options = [
            ("1", "Set Target", "Set new target URL/IP"),
            ("2", "List Targets", "Show previous targets"),
            ("3", "Clear Target", "Clear current target"),
            ("4", "Back", "Return to main menu")
        ]
        
        table = Table(show_header=False, box=None)
        table.add_column("Option", style="cyan", width=5)
        table.add_column("Action", style="white")
        table.add_column("Description", style="dim")
        
        for option, action, description in options:
            table.add_row(option, action, description)
        
        self.console.print(table)
        
        choice = Prompt.ask("Select option", choices=["1", "2", "3", "4"])
        
        if choice == "1":
            target = Prompt.ask("Enter target URL/IP")
            if target:
                self.current_target = target
                self.framework.set_target(target)
                self.console.print(f"[green]Target set to:[/green] {target}")
        elif choice == "2":
            self._list_targets()
        elif choice == "3":
            self.current_target = None
            self.console.print("[yellow]Target cleared[/yellow]")
        
        input("\nPress Enter to continue...")
    
    def _list_targets(self):
        """List previous targets"""
        targets = self.framework.config.get("targets", {})
        
        if not targets:
            self.console.print("[dim]No previous targets found[/dim]")
            return
        
        table = Table(title="Previous Targets")
        table.add_column("Target", style="cyan")
        table.add_column("Last Used", style="green")
        table.add_column("Actions", style="yellow")
        
        for target, info in targets.items():
            last_used = time.strftime("%Y-%m-%d %H:%M", time.localtime(info.get("last_used", 0)))
            table.add_row(target, last_used, "Select | Delete")
        
        self.console.print(table)
    
    def _module_menu(self, module_type: str):
        """Show module-specific menu"""
        if not self.current_target:
            self.console.print("[red]No target set. Please set a target first.[/red]")
            input("\nPress Enter to continue...")
            return
        
        module = self.modules[module_type]
        self.console.clear()
        self.console.print(Panel.fit(
            f"[bold]{module['name']}[/bold]\n{module['description']}",
            border_style=module['color']
        ))
        
        self.console.print(f"[green]Target:[/green] {self.current_target}")
        
        # Show available tools
        tools = module["tools"]
        table = Table(title=f"{module['name']} Tools")
        table.add_column("Tool", style="cyan")
        table.add_column("Status", style="green")
        table.add_column("Description", style="dim")
        
        for tool in tools:
            status = self.framework.check_tool_status(tool)
            status_text = "‚úÖ Installed" if status.value == "installed" else "‚ùå Missing"
            description = self.framework.tools.get(tool, {}).get("description", "No description")
            table.add_row(tool, status_text, description)
        
        self.console.print(table)
        
        # Tool execution options
        options = [
            ("1", "Run All Tools", f"Run all {module['name']} tools"),
            ("2", "Run Specific Tool", "Run a specific tool"),
            ("3", "Install Missing Tools", "Install missing tools"),
            ("4", "Back", "Return to main menu")
        ]
        
        option_table = Table(show_header=False, box=None)
        option_table.add_column("Option", style="cyan", width=5)
        option_table.add_column("Action", style="white")
        option_table.add_column("Description", style="dim")
        
        for option, action, description in options:
            option_table.add_row(option, action, description)
        
        self.console.print(option_table)
        
        choice = Prompt.ask("Select option", choices=["1", "2", "3", "4"])
        
        if choice == "1":
            self._run_module_tools(module_type)
        elif choice == "2":
            self._run_specific_tool(module_type)
        elif choice == "3":
            self._install_missing_tools(module_type)
    
    def _run_module_tools(self, module_type: str):
        """Run all tools in a module"""
        module = self.modules[module_type]
        tools = module["tools"]
        
        self.console.print(f"\n[bold]Running {module['name']} tools...[/bold]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            
            task = progress.add_task(f"Running {module['name']}...", total=len(tools))
            
            results = {}
            
            if module_type == "recon":
                results = self.framework.run_reconnaissance(self.current_target, tools)
            elif module_type == "exploit":
                results = self.framework.run_exploitation(self.current_target, tools)
            elif module_type == "bruteforce":
                results = self.framework.run_bruteforce(self.current_target, tools)
            elif module_type == "post":
                results = self.framework.run_post_exploitation(self.current_target, tools)
            
            progress.update(task, completed=len(tools))
        
        # Show results
        self._show_module_results(results, module["name"])
    
    def _run_specific_tool(self, module_type: str):
        """Run a specific tool"""
        module = self.modules[module_type]
        tools = module["tools"]
        
        self.console.print("\nAvailable tools:")
        for i, tool in enumerate(tools, 1):
            status = self.framework.check_tool_status(tool)
            status_text = "‚úÖ" if status.value == "installed" else "‚ùå"
            self.console.print(f"{i}. {status_text} {tool}")
        
        try:
            choice = int(Prompt.ask("Select tool number")) - 1
            if 0 <= choice < len(tools):
                tool = tools[choice]
                self._run_tool(tool)
            else:
                self.console.print("[red]Invalid choice[/red]")
        except ValueError:
            self.console.print("[red]Invalid input[/red]")
    
    def _run_tool(self, tool_name: str):
        """Run a specific tool"""
        self.console.print(f"\n[bold]Running {tool_name}...[/bold]")
        
        # Get tool arguments
        args = Prompt.ask(f"Enter arguments for {tool_name} (optional)")
        tool_args = args.split() if args else []
        
        # Run tool
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            
            task = progress.add_task(f"Running {tool_name}...", total=None)
            
            success, output = self.framework.run_tool(tool_name, tool_args, self.current_target)
            
            progress.update(task, completed=1)
        
        if success:
            self.console.print(f"[green]‚úÖ {tool_name} completed successfully[/green]")
            if output:
                self.console.print(f"[dim]Output: {output}[/dim]")
        else:
            self.console.print(f"[red]‚ùå {tool_name} failed[/red]")
            if output:
                self.console.print(f"[red]Error: {output}[/red]")
        
        input("\nPress Enter to continue...")
    
    def _install_missing_tools(self, module_type: str):
        """Install missing tools for a module"""
        module = self.modules[module_type]
        tools = module["tools"]
        
        missing_tools = []
        for tool in tools:
            status = self.framework.check_tool_status(tool)
            if status.value == "missing":
                missing_tools.append(tool)
        
        if not missing_tools:
            self.console.print("[green]All tools are already installed![/green]")
            input("\nPress Enter to continue...")
            return
        
        self.console.print(f"\n[bold]Missing tools:[/bold] {', '.join(missing_tools)}")
        
        if Confirm.ask("Install missing tools?"):
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                
                task = progress.add_task("Installing tools...", total=len(missing_tools))
                
                for tool in missing_tools:
                    progress.update(task, description=f"Installing {tool}...")
                    success = self.framework.install_tool(tool)
                    
                    if success:
                        self.console.print(f"[green]‚úÖ {tool} installed[/green]")
                    else:
                        self.console.print(f"[red]‚ùå {tool} installation failed[/red]")
                    
                    progress.advance(task)
        
        input("\nPress Enter to continue...")
    
    def _show_module_results(self, results: Dict[str, Any], module_name: str):
        """Show module execution results"""
        self.console.print(f"\n[bold]{module_name} Results:[/bold]")
        
        if not results:
            self.console.print("[dim]No results available[/dim]")
            input("\nPress Enter to continue...")
            return
        
        table = Table(title=f"{module_name} Results")
        table.add_column("Tool", style="cyan")
        table.add_column("Status", style="green")
        table.add_column("Output", style="dim")
        
        for tool, result in results.items():
            if isinstance(result, dict):
                status = "‚úÖ Success" if result.get("success") else "‚ùå Failed"
                output = result.get("output", "No output")[:50] + "..." if len(result.get("output", "")) > 50 else result.get("output", "No output")
            else:
                status = "‚úÖ Success"
                output = str(result)[:50] + "..." if len(str(result)) > 50 else str(result)
            
            table.add_row(tool, status, output)
        
        self.console.print(table)
        
        if Confirm.ask("Generate report for this session?"):
            self._generate_report()
        
        input("\nPress Enter to continue...")
    
    def _tool_management(self):
        """Tool management interface"""
        self.console.clear()
        self.console.print(Panel.fit("[bold]Tool Management[/bold]", border_style="yellow"))
        
        # Get tool status report
        status_report = self.framework.get_tool_status_report()
        
        # Categorize tools
        categorized_tools = {}
        for tool_name, tool_info in status_report.items():
            category = tool_info["category"]
            if category not in categorized_tools:
                categorized_tools[category] = []
            categorized_tools[category].append((tool_name, tool_info))
        
        # Display tools by category
        for category, tools in categorized_tools.items():
            self.console.print(f"\n[bold]{category.title()}:[/bold]")
            
            table = Table(show_header=True, header_style="bold magenta")
            table.add_column("Tool", style="cyan")
            table.add_column("Status", style="green")
            table.add_column("Required", style="yellow")
            table.add_column("Description", style="dim")
            
            for tool_name, tool_info in tools:
                status = "‚úÖ Installed" if tool_info["status"] == "installed" else "‚ùå Missing"
                required = "Yes" if tool_info["required"] else "No"
                description = tool_info["description"][:50] + "..." if len(tool_info["description"]) > 50 else tool_info["description"]
                
                table.add_row(tool_name, status, required, description)
            
            self.console.print(table)
        
        # Management options
        options = [
            ("1", "Install All Missing", "Install all missing required tools"),
            ("2", "Install Specific Tool", "Install a specific tool"),
            ("3", "Update Tools", "Update installed tools"),
            ("4", "Back", "Return to main menu")
        ]
        
        option_table = Table(show_header=False, box=None)
        option_table.add_column("Option", style="cyan", width=5)
        option_table.add_column("Action", style="white")
        option_table.add_column("Description", style="dim")
        
        for option, action, description in options:
            option_table.add_row(option, action, description)
        
        self.console.print(option_table)
        
        choice = Prompt.ask("Select option", choices=["1", "2", "3", "4"])
        
        if choice == "1":
            self._install_all_missing_tools()
        elif choice == "2":
            self._install_specific_tool()
        elif choice == "3":
            self._update_tools()
    
    def _install_all_missing_tools(self):
        """Install all missing required tools"""
        self.console.print("\n[bold]Installing all missing required tools...[/bold]")
        
        results = self.framework.install_all_tools()
        
        table = Table(title="Installation Results")
        table.add_column("Tool", style="cyan")
        table.add_column("Status", style="green")
        
        for tool, success in results.items():
            status = "‚úÖ Installed" if success else "‚ùå Failed"
            table.add_row(tool, status)
        
        self.console.print(table)
        input("\nPress Enter to continue...")
    
    def _install_specific_tool(self):
        """Install a specific tool"""
        # Get all tools
        status_report = self.framework.get_tool_status_report()
        tools = list(status_report.keys())
        
        self.console.print("\nAvailable tools:")
        for i, tool in enumerate(tools, 1):
            status = status_report[tool]["status"]
            status_text = "‚úÖ" if status == "installed" else "‚ùå"
            self.console.print(f"{i}. {status_text} {tool}")
        
        try:
            choice = int(Prompt.ask("Select tool number")) - 1
            if 0 <= choice < len(tools):
                tool = tools[choice]
                self.console.print(f"\n[bold]Installing {tool}...[/bold]")
                
                success = self.framework.install_tool(tool)
                
                if success:
                    self.console.print(f"[green]‚úÖ {tool} installed successfully[/green]")
                else:
                    self.console.print(f"[red]‚ùå {tool} installation failed[/red]")
            else:
                self.console.print("[red]Invalid choice[/red]")
        except ValueError:
            self.console.print("[red]Invalid input[/red]")
        
        input("\nPress Enter to continue...")
    
    def _update_tools(self):
        """Update installed tools"""
        self.console.print("\n[bold]Updating tools...[/bold]")
        
        # This would implement tool updating logic
        self.console.print("[yellow]Tool updating not yet implemented[/yellow]")
        input("\nPress Enter to continue...")
    
    def _reports_menu(self):
        """Reports menu"""
        self.console.clear()
        self.console.print(Panel.fit("[bold]Reports[/bold]", border_style="blue"))
        
        options = [
            ("1", "Generate Report", "Generate comprehensive report"),
            ("2", "View Reports", "View existing reports"),
            ("3", "Export Results", "Export results to different formats"),
            ("4", "Back", "Return to main menu")
        ]
        
        table = Table(show_header=False, box=None)
        table.add_column("Option", style="cyan", width=5)
        table.add_column("Action", style="white")
        table.add_column("Description", style="dim")
        
        for option, action, description in options:
            table.add_row(option, action, description)
        
        self.console.print(table)
        
        choice = Prompt.ask("Select option", choices=["1", "2", "3", "4"])
        
        if choice == "1":
            self._generate_report()
        elif choice == "2":
            self._view_reports()
        elif choice == "3":
            self._export_results()
    
    def _generate_report(self):
        """Generate comprehensive report"""
        if not self.current_target:
            self.console.print("[red]No target set. Please set a target first.[/red]")
            input("\nPress Enter to continue...")
            return
        
        self.console.print(f"\n[bold]Generating report for {self.current_target}...[/bold]")
        
        # Run comprehensive assessment
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            
            task = progress.add_task("Running comprehensive assessment...", total=None)
            
            results = self.framework.run_comprehensive_assessment(self.current_target)
            
            progress.update(task, completed=1)
        
        # Generate report
        report_path = self.framework.generate_integrated_report(self.current_target, results)
        
        self.console.print(f"[green]‚úÖ Report generated:[/green] {report_path}")
        input("\nPress Enter to continue...")
    
    def _view_reports(self):
        """View existing reports"""
        reports_dir = self.framework.loot_dir
        
        if not reports_dir.exists():
            self.console.print("[dim]No reports directory found[/dim]")
            input("\nPress Enter to continue...")
            return
        
        reports = list(reports_dir.glob("**/*.html"))
        
        if not reports:
            self.console.print("[dim]No reports found[/dim]")
            input("\nPress Enter to continue...")
            return
        
        table = Table(title="Available Reports")
        table.add_column("Report", style="cyan")
        table.add_column("Date", style="green")
        table.add_column("Size", style="yellow")
        
        for report in reports:
            date = time.strftime("%Y-%m-%d %H:%M", time.localtime(report.stat().st_mtime))
            size = f"{report.stat().st_size / 1024:.1f} KB"
            table.add_row(report.name, date, size)
        
        self.console.print(table)
        input("\nPress Enter to continue...")
    
    def _export_results(self):
        """Export results to different formats"""
        self.console.print("[yellow]Export functionality not yet implemented[/yellow]")
        input("\nPress Enter to continue...")
    
    def _settings_menu(self):
        """Settings menu"""
        self.console.clear()
        self.console.print(Panel.fit("[bold]Settings[/bold]", border_style="magenta"))
        
        # Show current settings
        settings = self.framework.config.get("settings", {})
        
        self.console.print("[bold]Current Settings:[/bold]")
        for key, value in settings.items():
            self.console.print(f"  {key}: {value}")
        
        options = [
            ("1", "Setup Proxy", "Configure proxy settings"),
            ("2", "Setup Tunnel", "Configure tunnel settings"),
            ("3", "Update Framework", "Update framework components"),
            ("4", "Reset Configuration", "Reset to default configuration"),
            ("5", "Back", "Return to main menu")
        ]
        
        table = Table(show_header=False, box=None)
        table.add_column("Option", style="cyan", width=5)
        table.add_column("Action", style="white")
        table.add_column("Description", style="dim")
        
        for option, action, description in options:
            table.add_row(option, action, description)
        
        self.console.print(table)
        
        choice = Prompt.ask("Select option", choices=["1", "2", "3", "4", "5"])
        
        if choice == "1":
            self._setup_proxy()
        elif choice == "2":
            self._setup_tunnel()
        elif choice == "3":
            self._update_framework()
        elif choice == "4":
            self._reset_configuration()
    
    def _setup_proxy(self):
        """Setup proxy configuration"""
        self.console.print("\n[bold]Proxy Configuration[/bold]")
        
        proxy_type = Prompt.ask("Proxy type", choices=["socks5", "http"], default="socks5")
        proxy_host = Prompt.ask("Proxy host", default="127.0.0.1")
        proxy_port = Prompt.ask("Proxy port", default="9050")
        
        self.framework.setup_proxy(proxy_type, proxy_host, proxy_port)
        self.console.print("[green]‚úÖ Proxy configuration set up[/green]")
        input("\nPress Enter to continue...")
    
    def _setup_tunnel(self):
        """Setup tunnel configuration"""
        self.console.print("\n[bold]Tunnel Configuration[/bold]")
        
        tunnel_type = Prompt.ask("Tunnel type", choices=["ngrok", "localtunnel"], default="ngrok")
        port = int(Prompt.ask("Local port", default="8080"))
        
        self.framework.setup_tunnel(tunnel_type, port)
        self.console.print("[green]‚úÖ Tunnel configuration set up[/green]")
        input("\nPress Enter to continue...")
    
    def _update_framework(self):
        """Update framework components"""
        self.console.print("[yellow]Framework updating not yet implemented[/yellow]")
        input("\nPress Enter to continue...")
    
    def _reset_configuration(self):
        """Reset configuration to defaults"""
        if Confirm.ask("Are you sure you want to reset configuration?"):
            # Reset configuration logic
            self.console.print("[green]‚úÖ Configuration reset[/green]")
        input("\nPress Enter to continue...")
    
    def _run_curses_tui(self):
        """Run curses-based TUI (fallback)"""
        # Simple curses implementation
        print("Curses TUI not implemented yet")
        self._run_simple_tui()
    
    def _run_simple_tui(self):
        """Run simple text-based TUI"""
        print("NightStalker Web Exploitation Framework")
        print("=" * 50)
        
        while self.running:
            print("\nMain Menu:")
            print("1. Target Management")
            print("2. Reconnaissance")
            print("3. Exploitation")
            print("4. Bruteforce")
            print("5. Post-Exploitation")
            print("6. Tool Management")
            print("7. Reports")
            print("8. Settings")
            print("0. Exit")
            
            if self.current_target:
                print(f"\nCurrent Target: {self.current_target}")
            
            choice = input("\nSelect option: ")
            
            if choice == "0":
                self.running = False
            else:
                print("Simple TUI - functionality limited. Use Rich TUI for full features.")

def main():
    """Main entry point"""
    tui = FrameworkTUI()
    tui.run()

if __name__ == "__main__":
    main() 