#!/usr/bin/env python3
"""
Linux Compatibility Test for NightStalker Framework
Tests all modules for Linux compatibility
"""

import sys
import os
import platform
import subprocess

def test_platform_detection():
    """Test platform detection works correctly"""
    print("Testing platform detection...")
    print(f"Platform: {platform.system()}")
    print(f"Architecture: {platform.machine()}")
    print(f"Python version: {platform.python_version()}")
    return True

def test_imports_linux():
    """Test all imports work on Linux"""
    print("\nTesting imports for Linux compatibility...")
    
    try:
        # Test main framework import
        import nightstalker
        print("‚úì Main framework import successful")
        
        # Test core modules
        from nightstalker.core.automation import AttackChain
        print("‚úì Core automation import successful")
        
        # Test redteam modules
        from nightstalker.redteam.payload_builder import PayloadBuilder, PayloadConfig
        print("‚úì Payload builder import successful")
        
        from nightstalker.redteam.polymorph import PolymorphicEngine
        print("‚úì Polymorphic engine import successful")
        
        from nightstalker.redteam.exfiltration import CovertChannels
        print("‚úì Exfiltration import successful")
        
        from nightstalker.redteam.infection_watchers import FileMonitor
        print("‚úì File monitor import successful")
        
        from nightstalker.redteam.self_rebuild import EnvironmentManager, EnvironmentConfig
        print("‚úì Environment manager import successful")
        
        from nightstalker.redteam.fuzzer import GeneticFuzzer
        print("‚úì Genetic fuzzer import successful")
        
        # Test C2 modules
        from nightstalker.redteam.c2.command_control import C2Server, C2Client
        print("‚úì C2 command control import successful")
        
        from nightstalker.redteam.c2.channels import DNSChannel, HTTPSChannel, ICMPChannel, TorDNSChannel
        print("‚úì C2 channels import successful")
        
        from nightstalker.redteam.c2.stealth import StealthManager
        print("‚úì C2 stealth import successful")
        
        # Test webred module
        from nightstalker.redteam.webred import WebRedTeam
        print("‚úì Web red team import successful")
        
        # Test CLI
        from nightstalker.cli import NightStalkerCLI
        print("‚úì CLI import successful")
        
        return True
        
    except Exception as e:
        print(f"‚úó Import failed: {e}")
        return False

def test_gui_fallback():
    """Test GUI fallback to CLI on Linux"""
    print("\nTesting GUI fallback...")
    
    try:
        import gui_exe_builder
        print("‚úì GUI EXE builder import successful")
        
        # Test CLI mode (simulated)
        print("‚úì GUI fallback to CLI mode available")
        return True
        
    except Exception as e:
        print(f"‚úó GUI fallback test failed: {e}")
        return False

def test_linux_specific_features():
    """Test Linux-specific features"""
    print("\nTesting Linux-specific features...")
    
    try:
        # Test /proc filesystem access
        if os.path.exists('/proc/cpuinfo'):
            with open('/proc/cpuinfo', 'r') as f:
                cpu_info = f.read()
                if 'processor' in cpu_info:
                    print("‚úì /proc/cpuinfo accessible")
                else:
                    print("‚ö† /proc/cpuinfo accessible but no processor info")
        else:
            print("‚ö† /proc/cpuinfo not available (not Linux)")
        
        # Test /proc/self/status for debugger detection
        if os.path.exists('/proc/self/status'):
            with open('/proc/self/status', 'r') as f:
                status = f.read()
                if 'TracerPid' in status:
                    print("‚úì /proc/self/status accessible")
                else:
                    print("‚ö† /proc/self/status accessible but no TracerPid")
        else:
            print("‚ö† /proc/self/status not available (not Linux)")
        
        return True
        
    except Exception as e:
        print(f"‚úó Linux features test failed: {e}")
        return False

def test_cli_functionality():
    """Test CLI functionality"""
    print("\nTesting CLI functionality...")
    
    try:
        # Test help command
        result = subprocess.run([
            sys.executable, '-m', 'nightstalker.cli', 'help'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 and 'NightStalker CLI' in result.stdout:
            print("‚úì CLI help command works")
        else:
            print("‚úó CLI help command failed")
            return False
        
        # Test payload list command
        result = subprocess.run([
            sys.executable, '-m', 'nightstalker.cli', 'payload', 'list'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úì CLI payload list command works")
        else:
            print("‚úó CLI payload list command failed")
            return False
        
        return True
        
    except subprocess.TimeoutExpired:
        print("‚úó CLI commands timed out")
        return False
    except Exception as e:
        print(f"‚úó CLI functionality test failed: {e}")
        return False

def main():
    """Run all Linux compatibility tests"""
    print("NightStalker Framework - Linux Compatibility Test")
    print("=" * 55)
    
    tests = [
        test_platform_detection,
        test_imports_linux,
        test_gui_fallback,
        test_linux_specific_features,
        test_cli_functionality
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 55)
    print(f"Linux Compatibility Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All Linux compatibility tests passed!")
        print("‚úÖ NightStalker framework is ready for Linux deployment")
        return 0
    else:
        print("‚ùå Some Linux compatibility tests failed")
        print("‚ö†Ô∏è  Review the errors above before deploying to Linux")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 